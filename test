# Import the required Active Directory module
Import-Module ActiveDirectory

# Define the top-level group
$topLevelGroup = "SDT_LIC_EXT_GEN"

# Prepare a list to store the extracted information
$userList = New-Object System.Collections.Generic.List[Object]

# Function to process a group and its members
function Process-Group {
    param (
        [string]$groupName
    )
    
    # Try to get the group and handle cases where it doesn't exist
    try {
        $group = Get-ADGroup -Identity $groupName -ErrorAction Stop
    } catch [Microsoft.ActiveDirectory.Management.ADIdentityNotFoundException] {
        Write-Host "Error: The group $groupName cannot be found." -ForegroundColor Red
        return
    } catch {
        Write-Host "Error: An unexpected error occurred while retrieving the group $groupName." -ForegroundColor Red
        return
    }

    # Attempt to retrieve all nested groups
    try {
        $nestedGroups = Get-ADGroup -Identity $groupName -Properties Member | Select-Object -ExpandProperty Member -ErrorAction Stop | ForEach-Object {
            Get-ADGroup -Identity $_ -Properties Name -ErrorAction SilentlyContinue | Where-Object { $_.Name -like "SDT_LIC_EXT_GEN_*" }
        }
    } catch {
        Write-Host "Error: Failed to retrieve nested groups under $groupName." -ForegroundColor Yellow
        return
    }

    # Process each nested group
    foreach ($nestedGroup in $nestedGroups) {
        if ($null -eq $nestedGroup) {
            Write-Host "Warning: A nested group could not be found or accessed." -ForegroundColor Yellow
            continue
        }

        # Get all users in the nested group
        try {
            $users = Get-ADGroupMember -Identity $nestedGroup.DistinguishedName -ErrorAction Stop | Where-Object { $_.objectClass -eq "user" }
        } catch {
            Write-Host "Warning: Could not retrieve users for group $($nestedGroup.Name)." -ForegroundColor Yellow
            continue
        }
        
        foreach ($user in $users) {
            if ($null -eq $user) {
                Write-Host "Warning: A user could not be found or accessed in group $($nestedGroup.Name)." -ForegroundColor Yellow
                continue
            }

            # Verify that the user exists before attempting to get details
            try {
                $userDetails = Get-ADUser -Identity $user.SamAccountName -Properties EmailAddress -ErrorAction Stop
            } catch [Microsoft.ActiveDirectory.Management.ADIdentityNotFoundException] {
                Write-Host "Warning: The user $($user.SamAccountName) cannot be found in the domain." -ForegroundColor Yellow
                continue
            } catch {
                Write-Host "Warning: An unexpected error occurred while retrieving details for user $($user.SamAccountName)." -ForegroundColor Yellow
                continue
            }

            # Create an entry for each user and add to the list
            $userList.Add([PSCustomObject]@{
                Group = $nestedGroup.Name
                User = $userDetails.SamAccountName
                Email = $userDetails.EmailAddress
                ID = $userDetails.ObjectGUID
            })
        }
    }
}

# Process the top-level group
Process-Group -groupName $topLevelGroup

# Export the results to a CSV file, grouping users by their groups
$csvFilePath = "C:\path\to\your\directory\AD_User_Extract.csv"
$userList | Sort-Object Group | Export-Csv -Path $csvFilePath -NoTypeInformation -Encoding UTF8

Write-Host "The CSV file has been created at: $csvFilePath"
