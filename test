import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.bc.workflow.WorkflowSchemeService;
import com.atlassian.jira.workflow.WorkflowSchemeManager;
import com.atlassian.jira.workflow.WorkflowManager;
import com.atlassian.jira.workflow.WorkflowScheme;
import com.atlassian.jira.workflow.WorkflowException;
import com.atlassian.jira.project.ProjectManager;
import groovy.transform.Field;

@Field WorkflowManager workflowManager = ComponentAccessor.getWorkflowManager();
@Field WorkflowSchemeService workflowSchemeService = ComponentAccessor.getComponent(WorkflowSchemeService);
@Field WorkflowSchemeManager workflowSchemeManager = ComponentAccessor.getWorkflowSchemeManager();
@Field ProjectManager projectManager = ComponentAccessor.getProjectManager();

// Function to delete inactive workflow schemes for a specific project
def deleteInactiveWorkflowSchemes(String projectKey) {
    def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser();
    def project = projectManager.getProjectByCurrentKey(projectKey);

    if (project == null) {
        log.error("Project with key $projectKey not found.");
        return;
    }

    def workflowScheme = workflowSchemeManager.getWorkflowScheme(project);

    if (workflowScheme == null) {
        log.warn("No workflow scheme associated with project $projectKey.");
        return;
    }

    // Check if the scheme is inactive and delete if necessary
    if (!workflowSchemeService.isActive(workflowScheme)) {
        log.warn("Deleting inactive workflow scheme for project: $projectKey");
        workflowSchemeService.deleteWorkflowScheme(currentUser, workflowScheme);
    } else {
        log.info("Workflow scheme for project $projectKey is active.");
    }
}

// Function to delete inactive workflows associated with a specific project
def deleteInactiveWorkflows(String projectKey) {
    def project = projectManager.getProjectByCurrentKey(projectKey);

    if (project == null) {
        log.error("Project with key $projectKey not found.");
        return;
    }

    def workflowScheme = workflowSchemeManager.getWorkflowScheme(project);

    if (workflowScheme == null) {
        log.warn("No workflow scheme associated with project $projectKey.");
        return;
    }

    def activeWorkflows = workflowManager.getActiveWorkflows();
    def allWorkflows = workflowManager.getWorkflows();

    // Get workflows linked to the scheme for this project
    def workflowsInScheme = workflowScheme.getMappings().collect { it.value }.toSet();

    // Find inactive workflows related to the project
    def inactiveWorkflows = workflowsInScheme.findAll { workflowName ->
        def workflow = workflowManager.getWorkflow(workflowName);
        workflow && !(workflow in activeWorkflows);
    };

    def counter = 0;
    inactiveWorkflows.each { workflowName ->
        def workflow = workflowManager.getWorkflow(workflowName);
        try {
            workflowManager.deleteWorkflow(workflow);
            counter++;
            log.warn("Deleted inactive workflow: ${workflow.getDisplayName()} for project $projectKey");
        } catch (WorkflowException e) {
            log.error("Unable to delete workflow: ${workflow.getDisplayName()}");
            log.error("${e.getMessage()}");
        }
    }

    log.warn("Deleted $counter inactive workflows for project $projectKey");
}

// Main function to delete inactive workflow schemes and workflows for a specific project key
def deleteProjectWorkflows(String projectKey) {
    log.info("Starting deletion process for project: $projectKey");

    // Delete inactive workflow schemes for the specific project
    deleteInactiveWorkflowSchemes(projectKey);

    // Delete inactive workflows for the specific project
    deleteInactiveWorkflows(projectKey);

    log.info("Finished deletion process for project: $projectKey");
}

// Specify the project key for which you want to delete workflows
def projectKey = "PROJECTKEY";  // Replace with your project key
deleteProjectWorkflows(projectKey);
