import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.bc.workflow.WorkflowSchemeService;
import com.atlassian.jira.workflow.WorkflowSchemeManager;
import com.atlassian.jira.workflow.WorkflowManager;
import com.atlassian.jira.workflow.WorkflowScheme;
import com.atlassian.jira.workflow.WorkflowException;

import groovy.transform.Field;

@Field WorkflowManager workflowManager = ComponentAccessor.getWorkflowManager()
@Field WorkflowSchemeService workflowSchemeService = ComponentAccessor.getComponent(WorkflowSchemeService);
@Field WorkflowSchemeManager workflowSchemeManager = ComponentAccessor.getWorkflowSchemeManager();

// Function to check if a workflow is a system workflow
def isSystemWorkflow(workflow) {
    def systemWorkflowNames = ['jira', 'system', 'Default Workflow']  // Add more system workflow names as needed
    return systemWorkflowNames.any { workflow.getName().contains(it) }
}

// Delete all inactive Workflow Schemes
def deleteInactiveWorkflowSchemes() {
    def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser();
    Collection<WorkflowScheme> inactiveWorkflowSchemes = workflowSchemeManager.getAssignableSchemes()
        .findAll { !workflowSchemeService.isActive((WorkflowScheme) it) }

    log.warn("Found ${inactiveWorkflowSchemes.size()} inactive workflow schemes");
    
    inactiveWorkflowSchemes.each { scheme ->
        if (!isSystemWorkflow(scheme)) {  // Exclude system workflow schemes
            workflowSchemeService.deleteWorkflowScheme(currentUser, scheme)
            log.warn("Deleted workflow scheme: ${scheme.getName()}")
        } else {
            log.warn("Skipped system workflow scheme: ${scheme.getName()}")
        }
    }
}

// Delete all inactive Workflows
def deleteInactiveWorkflows() {
    def activeWorkflows = workflowManager.getActiveWorkflows();
    def allWorkflows = workflowManager.getWorkflows();

    def inactiveWorkflows = allWorkflows.findAll { workflow -> 
        !(workflow in activeWorkflows) && !isSystemWorkflow(workflow)  // Exclude system workflows
    }

    def counter = 0;
    inactiveWorkflows.each { workflow ->
        try {
            workflowManager.deleteWorkflow(workflow);
            counter++;
            log.warn("Deleted inactive workflow: ${workflow.getDisplayName()}")
        } catch (WorkflowException e) {
            log.error("Unable to delete workflow: ${workflow.getDisplayName()}")
            log.error("${e.getMessage()}")
        }
    }
    log.warn("Deleted $counter inactive workflows")
}

// First delete the inactive schemes, then delete the inactive workflows
deleteInactiveWorkflowSchemes();
deleteInactiveWorkflows();
